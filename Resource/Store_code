
    # def persist2MySql(self):
    #
    #     for e_id in self.e_U:
    #         e_u_num = 0
    #         e_U_str = ""
    #         for e_doc_id in self.e_U[e_id]:
    #             e_U_str += "{}-{};".format(e_doc_id, self.e_U[e_id][e_doc_id])
    #             e_u_num += self.e_U[e_id][e_doc_id]
    #         e_U_str = e_U_str.strip(";")
    #
    #         e_B_str = ""
    #         e_b_num = 0
    #         for e_r_doc_id in self.e_B[e_id]:
    #             e_B_str += "{}-{};".format(e_r_doc_id, self.e_B[e_id][e_r_doc_id])
    #             e_b_num += self.e_B[e_id][e_r_doc_id]
    #         e_B_str = e_B_str.strip()
    #
    #         query = "insert into e_context " \
    #                 "(e_id, e_U, e_B, e_num_global," \
    #                 " e_U_num, e_B_num, ration_global) " \
    #                 "values " \
    #                 "({},'{}','{}',{}, {}, {}, {})" \
    #             .format(e_id, e_U_str, e_B_str, self.e_Num[e_id]
    #                     , e_u_num, e_b_num, self.e_Num[e_id] / self.total_e_num)
    #
    #         mycursor = mydb.cursor()
    #         try:
    #             mycursor.execute(query)
    #             mydb.commit()
    #         except Exception as e:
    #             print("Exception:{}\nInsert Failed, start rolling back.".format(e))
    #             print("e_U_str: {}".format(len(e_U_str)))
    #             print("e_B_str: {}".format(len(e_B_str)))
    #             mydb.rollback()
    #
    #     for r_id in self.r_S:
    #         r_S_str = ""
    #         r_s_num = 0
    #         for subject_id in self.r_S[r_id]:
    #             r_S_str += "{}-{};".format(subject_id, self.r_S[r_id][subject_id])
    #             r_s_num += self.r_S[r_id][subject_id]
    #         r_S_str = r_S_str.strip(";")
    #
    #         r_O_str = ""
    #         r_o_num = 0
    #         for object_id in self.r_O[r_id]:
    #             r_O_str += "{}-{};".format(object_id, self.r_O[r_id][object_id])
    #             r_o_num += self.r_O[r_id][object_id]
    #         r_O_str = r_O_str.strip(";")
    #
    #         r_B_str = ""
    #         r_b_num = 0
    #         for b_token in self.r_B[r_id]:
    #             r_B_str += "{}-{};".format(b_token, self.r_B[r_id][b_token])
    #             r_b_num += self.r_B[r_id][b_token]
    #         r_B_str = r_B_str.strip(";")
    #
    #         query = "insert into r_context " \
    #                 "(r_id, r_S, r_O, r_B, r_num_global," \
    #                 "r_s_num, r_o_num, r_b_num, ration_global) " \
    #                 "values " \
    #                 "({},'{}','{}','{}',{}," \
    #                 "{}, {}, {}, {})" \
    #             .format(r_id, r_S_str, r_O_str, r_B_str, self.r_Num[r_id],
    #                     r_s_num, r_o_num, r_b_num, self.r_Num[r_id] / self.total_r_num)
    #
    #         mycursor = mydb.cursor()
    #         try:
    #             mycursor.execute(query)
    #             mydb.commit()
    #         except Exception as e:
    #             print("Exception:{}\nInsert Failed, start rolling back.".format(e))
    #             print("r_S_str: {}".format(len(r_S_str)))
    #             print("r_O_str: {}".format(len(r_O_str)))
    #             print("r_B_str: {}".format(len(r_B_str)))
    #             mydb.rollback()
    #
    # def genEntityDoc(self):
    #     self.load_data()
    #     self.persist2MySql()
